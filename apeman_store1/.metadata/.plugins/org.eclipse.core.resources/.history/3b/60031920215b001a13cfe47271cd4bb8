package com.apeman1024.web;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tomcat.util.http.fileupload.FileItem;
import org.apache.tomcat.util.http.fileupload.RequestContext;
import org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory;
import org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload;


@WebServlet("/index")
public class Index extends HttpServlet {
	private static final long serialVersionUID = 1L;
       

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		doGet(request, response);
	}


	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setHeader("Access-Control-Allow-Origin", "*");
	    response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE");
	    response.setHeader("Access-Control-Allow-Credentials", "true");
	    
	   
	}
	
	
	
	
public Map<String, String> reciveImageAndParams(HttpServletRequest request) throws Exception {
		
		Map<String, String> uri = new HashMap<String, String>();

		String tempPathDir = "";
		File tempPathDirFile = new File(tempPathDir);

		// 创建工厂
		DiskFileItemFactory factory = new DiskFileItemFactory();
		// 设置缓冲区大小，这里是400kb
		factory.setSizeThreshold(4096 * 100);
		// 设置缓冲区目录
		factory.setRepository(tempPathDirFile);
		// Create a new file upload handler
		ServletFileUpload upload = new ServletFileUpload(factory);
		// 设置上传文件的大小 12M
		upload.setSizeMax(4194304 * 3);
		// 创建解析器
		// 得到所有的文件
		List<FileItem> items = upload.parseRequest((RequestContext) request);
//		Iterator<FileItem> i = items.iterator();
//		//图片地址拼接
//		StringBuffer buf=new StringBuffer();
//		String img_urls="";
//		int j=0;//防止重名
//		while (i.hasNext()) {
//			FileItem fi = i.next();
//			// false表示文件 否则字段
//			if (!fi.isFormField()) {
//				String fileName = fi.getName();
//				if (fileName != null) {
//					// 这里加一个限制，如果不是图片格式，则提示错误. (gif,jpg,jpeg,bmp,png)
//					String suffixName = FilenameUtils.getExtension(fileName);
//					if ("jpg".equalsIgnoreCase(suffixName) || "jpeg".equalsIgnoreCase(suffixName)
//							|| "png".equalsIgnoreCase(suffixName) || "gif".equalsIgnoreCase(suffixName)) {
//						
//						j++;
//						String imageName = System.currentTimeMillis()+j+ "." + suffixName;
//						//String imgPath = "e:" + imageName;// 本机
//						ConfUtil cf = new ConfUtil();
//						String imgPath = cf.getConfig("imgconfig.properties", "imgPath") + imageName;//服务器
//
//						//图片地址拼接
//						String img_url=cf.getConfig("imgconfig.properties", "imgurl") + imageName;
//						img_urls=buf.append(img_url).append(",").toString();
//						// 定义图片流
//						InputStream fin = fi.getInputStream();
//						// 定义图片输出流
//						FileOutputStream fout = new FileOutputStream(imgPath);
//						// 写文件
//						byte[] b = new byte[1024];
//						int length = 0;
//						while ((length = fin.read(b)) > 0) {
//							fout.write(b, 0, length);
//						}
//						// 关闭数据流
//						fin.close();
//						fout.close();
//
//					} else {
//						// throw new ProcureException("文件格式不正确");
//					}
//				}
//			} else {
//				fi.getString("UTF-8");
//				uri.put(new String(fi.getFieldName()),
//						new String(fi.getString()));
//			}
//		}
//		if(img_urls!="") {
//			
//			img_urls=img_urls.substring(0,img_urls.length()-1);
//		}
//		uri.put("img_urls", img_urls);
		return uri;

	}

	

}
